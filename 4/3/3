<p>Разберемся, как установить на диске несколько partition-ов и примонтировать их.</p>

<p>Есть несколько утилит для редактирования partition-ов диска. Мы воспользуемся утилитой <code>fdisk</code>. Введите <code>fdisk dsk</code>, чтобы начать редактирование.</p>

<p>Ранее я говорил о том, что мы создали диск с единственным partition-ом. Это не совсем так, так как диск с partition-ами должен содержать специальную метаинформацию, которой у нас не было. Когда мы запустим fdisk, он нас предупредит о том, что наш диск является чистой ext4 файловой системой, которую он просто перезапишет.</p>

<p>Интерфейс этой программы не совсем тривиальный. Внимательно читайте, что она выводит.</p>

<p>Для начала, познакомимся с форматами таблиц partition-ов. Выведите help с помощью <code>m</code> и посмотрите на последний блок, в котором написаны форматы <code>GPT</code>, <code>SGI</code>, <code>DOS</code> и <code>Sun</code>. Мы поговорим о первом и третьем.</p>

<pre><code class="language-no-highlight">...
  Create a new label
   g   create a new empty GPT partition table
   G   create a new empty SGI (IRIX) partition table
   o   create a new empty DOS partition table
   s   create a new empty Sun partition table</code></pre>

<p>Когда вы запускаете компьютер, на нём выполняется "некий" код, который делает некоторую подготовку, а затем начинает выполнять код, написанный где-то на диске. Этот "некий" код, который ответственнен за первичную подготовку, бывает двух типов: <code>BIOS</code> и <code>EFI</code>.</p>

<p>BIOS действует очень просто: он загружает первый сектор диска и начинает его выполнять. Поэтому в первом секторе мы обязательно должны написать код, который поймет, где находится нужный нам partition, и загрузит его. (Один сектор — это, кстати, 512 байт. А вы сможете вместить такую логику в этот объем?)</p>

<p>BIOS сейчас является устаревшим, и маловероятно, что на вашем компьютере используется он. Однако, вы можете запустить виртуальную машину с BIOS (почему-то, это фукнция по умолчанию в VirtualBox).</p>

<p>EFI значительно умнее и его "некий" код изучает таблицу partition-ов и загружает нужный самостоятельно.</p>

<p>Обратите внимание, что термин "таблица partition-ов" не имеет отношения к термину "файловая система". Вы можете иметь на диске partition-ы с разными файловыми системами.</p>

<p>Итак, EFI использует формат GPT, а BIOS использует формат DOS (на самом деле, формат <code>MBR</code>, к которому относится DOS).</p>

<p>Посмотрим на используемый сейчас формат с помощью <code>p</code>.</p>

<pre><code class="language-no-highlight">Command (m for help): p
Disk dsk: 512 KiB, 524288 bytes, 1024 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xaf3f4246</code></pre>

<p>По умолчанию fdisk выбрал формат DOS. Давайте проверим, как он отформатирует наш диск. Введите <code>n</code> для создания нового partition-а и, пока что, прокликайте всё без изменения. Теперь введите <code>w</code>, чтобы выполнить форматирование.</p>

<p>Посмотрим на первый сектор, то есть, первые 512 байт получившегося файла <code>dsk</code>.</p>

<p>Посмотрите на таблицу из <a href="http://wiki.osdev.org/Partition_Table" rel="noopener noreferrer nofollow">http://wiki.osdev.org/Partition_Table</a> . Согласно таблице, информация о нашем первом partition-е должна находиться на байте <code>0x01BE</code>.</p>

<table border="1" cellpadding="4" cellspacing="0" style="background: #f9f9f9; border: 1px #aaaaaa solid;">
	<tbody>
		<tr>
			<th>Partition number</th>
			<th>Offset</th>
		</tr>
		<tr>
			<td>Partition 1</td>
			<td>0x01BE (446)</td>
		</tr>
		<tr>
			<td>Partition 2</td>
			<td>0x01CE (462)</td>
		</tr>
		<tr>
			<td>Partition 3</td>
			<td>0x01DE (478)</td>
		</tr>
		<tr>
			<td>Partition 4</td>
			<td>0x01EE (494)</td>
		</tr>
	</tbody>
</table>

<p> Проверим это с помощью <code>hd</code>: <code>hd dsk</code>.</p>

<pre><code class="language-no-highlight">00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001b0  00 00 00 00 00 00 00 00  e2 79 d9 ef 00 00 00 00  |.........y......|
000001c0  02 00 83 01 04 15 01 00  00 00 ff 03 00 00 00 00  |................|
000001d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 55 aa  |..............U.|
...</code></pre>

<p>Мы действительно видим ненулевые биты на отрезке <code>0x1be - 0x1cd</code>. (Что написано на отрезке <code>0x1b8 - 0x1ba</code> можете изучить самостоятельно по той же ссылке.) Кроме того, мы здесь видим в конце первого сектора байты <code>0x55</code> и <code>0xaa</code>, которые обязательно должны быть в MBR.</p>