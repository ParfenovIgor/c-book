<p>Предположим, что мы хотим запустить процесс так, чтобы он видел лишь некое поддерево файловой системы. Есть два способа достичь этого: <code>chroot</code> и системный вызов <code>clone</code> с флагом <code>CLONE_NEWNS</code>. Второй способ использует namespaces, которые были введены в Linux не очень давно для контейнеризации (изоляции процессов), и именно его сейчас используют утилиты <code>LXC</code> и <code>Docker</code>. Namespaces способны изолировать не только файловую систему и значительно сложнее chroot-а, поэтому будем здесь работать с ним.</p>

<p>При использовании любого способа, так как программа не будет видеть ничего вне выбранного поддерева, необходимо будет иметь как минимум, необходимые shared objects, а, желательно, почти всю ОС в этом поддереве.</p>

<p>Попробуем запустить pwd в изолированной директории. Создайте директорию <code>dir</code> и скопируйте туда pwd.</p>

<pre><code class="language-no-highlight">$ mkdir dir
$ cp /usr/bin/pwd dir</code></pre>

<p>Попробуем запустить его с помощью программы chroot.</p>

<pre><code class="language-no-highlight">$ sudo chroot dir /pwd
chroot: failed to run command ‘/pwd’: No such file or directory</code></pre>

<p>Первым аргументом мы вводим поддерево, которое будет видеть процесс, а вторым — путь к исполняемому файлу относительно корня этого поддерева.</p>

<p>Ошибка очень неочевидная и она говорит о том, что загрузчик процесса не смог найти необходимые shared objects. (Как это понять, история умалчивает.) Мы можем посмотреть необходимые shared objects с помощью программы <code>ldd</code>, а затем скопировать их в dir.</p>

<pre><code class="language-no-highlight">$ cd dir
$ ldd pwd
	linux-vdso.so.1 (0x00007ffd1aed3000)
	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007d59e6000000)
	/lib64/ld-linux-x86-64.so.2 (0x00007d59e637a000)
$ mkdir -p lib/x86_64-linux-gnu lib64
$ cp /lib/x86_64-linux-gnu/libc.so.6 lib/x86_64-linux-gnu/
$ cp /lib64/ld-linux-x86-64.so.2 lib64
$ cd ..
$ sudo chroot dir /pwd
/</code></pre>

<p><code>linux-vdso.so.1</code> — особый shared object, который импортируется в из ядра в любую программу. Обратите внимание, что pwd вывел свою позицию относительно поддерева.</p>

<p>Для запуска sh скопируем в dsk образ ОС. (Ведь, чтобы запускать другие программы в sh, необходимо будет их всех также скопировать вместе с их зависимостями.) Наверное, легче всего скачивать образы с помощью утилиты Docker. Очистите директорию dsk и выполните <code>docker export $(docker create ubuntu) | tar -C dsk -xvf -</code> , чтобы скачать и образ ОС Ubuntu и разархивировать его в dsk.</p>

<p>Выполните <code>sudo chroot dsk /bin/sh</code> , чтобы запустить sh. Попробуйте походить по папкам, чтобы удостовериться, что вы не имеете доступа к основной файловой системе.</p>

<p>chroot имеет некоторые уязвимости, которые устраняют namespaces. Можете изучить самостоятельно, что нехорошего может сделать программа, запущенная из chroot-а.</p>