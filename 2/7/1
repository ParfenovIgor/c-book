<p>В C можно передавать в функции указатели на другие функции, чтобы строить функции высших порядков.</p>

<pre><code class="language-cpp">int square(int x) {
    return x * x;
}

int apply(int x, int(*f)(int)) {
    return f(x);
}

int main() {
    printf("%d\n", apply(5, square));
    return 0;
}</code></pre>

<p>Функция <code>square</code> возвращает квадрат аргумента и интереса не представляет. Посмотрим на второй аргумент функции <code>apply</code>. Тип этого аргумента — <code>int(*)(int)</code> — указатель на функцию, которая принимает один аргумент типа <code>int</code>, и возвращает тип <code>int</code>. <code>f</code> — это название аргумента. Функция <code>apply</code> применяет свой второй аргумент к первому аргументу.</p>

<p>Указатели на функции можно объявлять и как обычные локальные переменные.</p>

<pre><code class="language-cpp">int square(int x) {
    return x * x;
}

int main() {
    int(*foo)(int) = square;
    printf("%d\n", foo(5));
    return 0;
}</code></pre>

<p>Выводы обеих программ — <code>25</code></p>

<p>Указатели на функции обычно используются для двух целей:</p>

<ul>
	<li>Создание функций высшего порядка</li>
	<li>Создание наследования</li>
</ul>