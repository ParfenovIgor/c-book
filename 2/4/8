<p>Помимо многомерных массивов можно пользоваться также многомерными указателями. Однако, как и в одномерном случае, указатели не знают форму массива. Поэтому, например, двумерный массив размера <code>n*m</code> в помощью указателей представляется как массив размера <code>n</code>, состоящий из указателей на массивы размера <code>m</code> (на самом деле, размеры этих массивов могут различаться). Динамическое выделение двумерного массива выглядит так:</p>

<pre><code class="language-cpp">int main() {
    const int n, m;
    int **a = malloc(n * sizeof(int*));
    int i;
    for (i = 0; i &lt; n; i++) {
        a[i] = malloc(m * sizeof(int));
    }
    
    a[2][3] = 12;
    printf("%d\n", a[2][3]);
    
    for (i = 0; i &lt; n; i++) {
        free(a[i]);
    }
    free(a);
    
    return 0;
}</code></pre>

<p>Вывод этой программы: <code>12</code></p>

<p>Обратите внимание на следующее:</p>

<ul>
	<li>Я использовал на этот раз идентификаторы <code>n</code> и <code>m</code> в качестве размера массива. Так как размер массива должен быть известен на момент компиляции, я должен объявить их как константы. Значения констант нельзя менять.</li>
	<li>Выделение памяти для массива происходит в два этапа: сначала я создаю массив указателей (поэтому домножение идет на <code>sizeof(int)</code>) размера <code>n</code>, а затем для каждого указателя создаю массив <code>int</code>-ов размера <code>m</code>. Тоже самое касается освобождения памяти.</li>
	<li>Итоговый размер массива не <code>n * m * sizeof(int)</code>, а <code>n * sizeof(int*) + n * m * sizeof(int)</code>.</li>
</ul>

<p>В отличии от локального массива, здесь отдельные ряды не идут друг за другом, а расположены так, как это сделал <code>malloc</code>. Мы можем расположить ряды массива подряд самостоятельно, но тогда нам нужно будет использовать не оператор индексации <code>[]</code>, а свою функцию.</p>

<pre><code class="language-cpp">int offset(int i, int j, int m) {
    return i * m + j;
}

int main() {
    const int n, m;
    int *a = malloc(n * m * sizeof(int));
    
    a[offset(2, 3, m)] = 12;
    printf("%d\n", a[offset(2, 3, m)]);
    
    free(a);
    
    return 0;
}</code></pre>

<p>Вывод этой программы: <code>12</code></p>

<p>Попробуйте самостоятельно разобраться с тем, как здесь организован массив.</p>