<p>Разберёмся с тем, какие секции присутствуют в объектном файле, и как компоновщих ищет и подставляет адреса меток из разных модулей.</p>

<p><code>main.asm</code></p>

<pre><code class="language-no-highlight">section .data
buffer:
    db      "Check...", 0xA
length: 
    dd      length - buffer

section .text
extern exit
global _start
_start:
    mov     rax, 0x1
    mov     rdi, 0x1
    mov     rsi, buffer
    mov     rdx, [length]
    syscall

    call    exit</code></pre>

<p>Выполним ассемблирование, а затем дизассемблирование объектного файла.</p>

<pre><code class="language-no-highlight">$ nasm -felf64 main.asm -o main.o
$ objdump -d main.o

main.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &lt;_start&gt;:
   0:	b8 01 00 00 00       	mov    $0x1,%eax
   5:	bf 01 00 00 00       	mov    $0x1,%edi
   a:	48 be 00 00 00 00 00 	movabs $0x0,%rsi
  11:	00 00 00 
  14:	48 8b 14 25 00 00 00 	mov    0x0,%rdx
  1b:	00 
  1c:	0f 05                	syscall 
  1e:	e8 00 00 00 00       	call   23 &lt;length+0x1a&gt;</code></pre>

<p>Посмотрите на инструкцию call. Если вы посмотрите в ISA, то увидете, что после такого opcode-а идёт адрес, в который следует прыгнуть. Но здесь записано число ноль, как временное значение, так как адреса метки exit мы пока не знаем.</p>

<p>Здесь идёт речь не об адресе в файле, а об адресе в оперативной памяти во время исполнения (возможно, относительно регистра <code>rip</code>, если код position independent). А проектировать то, как будет лежать программа в оперативной памяти, будет компоновщик с использованием linker script-а.</p>

<p>Посмотрим на структуру объектного файла.</p>

<pre><code class="language-no-highlight">$ readelf -a main.o
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          64 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           64 (bytes)
  Number of section headers:         8
  Section header string table index: 4

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .data             PROGBITS         0000000000000000  00000240
       000000000000000d  0000000000000000  WA       0     0     4
  [ 2] .bss              NOBITS           0000000000000000  00000250
       0000000000000010  0000000000000000  WA       0     0     4
  [ 3] .text             PROGBITS         0000000000000000  00000250
       0000000000000023  0000000000000000  AX       0     0     16
  [ 4] .shstrtab         STRTAB           0000000000000000  00000280
       0000000000000037  0000000000000000           0     0     1
  [ 5] .symtab           SYMTAB           0000000000000000  000002c0
       00000000000000f0  0000000000000018           6     8     8
  [ 6] .strtab           STRTAB           0000000000000000  000003b0
       000000000000002a  0000000000000000           0     0     1
  [ 7] .rela.text        RELA             0000000000000000  000003e0
       0000000000000048  0000000000000018           5     3     8
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  D (mbind), l (large), p (processor specific)

There are no section groups in this file.

There are no program headers in this file.

There is no dynamic section in this file.

Relocation section '.rela.text' at offset 0x3e0 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
00000000000c  000200000001 R_X86_64_64       0000000000000000 .data + 0
000000000018  00020000000b R_X86_64_32S      0000000000000000 .data + 9
00000000001f  000800000002 R_X86_64_PC32     0000000000000000 exit - 4
No processor specific unwind information to decode

Symbol table '.symtab' contains 10 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS main.asm
     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 .data
     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    2 .bss
     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 .text
     5: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT    1 buffer
     6: 0000000000000009     0 NOTYPE  LOCAL  DEFAULT    1 length
     7: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT    2 zeros
     8: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND exit
     9: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT    3 _start

No version information found in this file.</code></pre>

<p>Мы видим восемь секций: , <code>.data</code>, <code>.bss</code>, <code>.text</code>, <code>.shstrtab</code>, <code>.symtab</code>, <code>.strtab</code>, <code>.rela.text</code>.</p>

<p>В нашем файле на языке ассемблера мы написали только три секции: <code>.data</code>, <code>.bss</code> и <code>.text</code>. Также, мы часто сами пишем секцию <code>.rodata</code> (read-only data), которая во время исполнения будет неизменяемой. Обычно в неё попадают <code>const char*</code>.</p>

<p>Остальные секции являются вспомогательными и генерируются ассемблером. На секцию <code>.symtab</code> мы уже смотрели. Секции <code>.shstrtab</code> и <code>.strtab</code> в данном файле являются пустыми, и мы их разбирать не будем.</p>

<p>Посмотрим на таблицу внимательнее.</p>

<pre><code class="language-no-highlight">Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .data             PROGBITS         0000000000000000  00000240
       000000000000000d  0000000000000000  WA       0     0     4
...</code></pre>

<p>Поле Address получит смысл только после выполнения компоновки. Поле Offset — это позиция секции в самом файле. Например, позиция секции <code>.data</code> — <code>0x240</code> байт. Проверим это.</p>

<pre><code class="language-no-highlight">$ hd main.o
...
00000240  43 68 65 63 6b 2e 2e 2e  0a 09 00 00 00 00 00 00  |Check...........|
...</code></pre>

<p>Действительно, в этом месте начинается строка <code>Check...</code>.</p>

<p>Поле Flags хранит, помимо не особо интересных нам флагов, флаги прав (permissions). Например, мы видим, что секция <code>.data</code> имеет флаг <code>W</code>, что означает, что она writable (изменяемая).</p>

<p>Посмотрим на секцию <code>.rela.text</code>.</p>

<pre><code class="language-no-highlight">Relocation section '.rela.text' at offset 0x3e0 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
00000000000c  000200000001 R_X86_64_64       0000000000000000 .data + 0
000000000018  00020000000b R_X86_64_32S      0000000000000000 .data + 9
00000000001f  000800000002 R_X86_64_PC32     0000000000000000 exit - 4</code></pre>

<p>Посмотрите на третью строку таблицы. В ней записана метка <code>exit</code>, и адрес <code>0x1f</code>. Посмотрите на инструкцию call:</p>

<pre><code class="language-no-highlight">...
  1e:	e8 00 00 00 00       	call   23 &lt;length+0x1a&gt;</code></pre>

<p><code>0x1f</code> — это как раз место, в которое следует положить адрес метки. Вот и вся цепочка действий для подстановки адресов.</p>