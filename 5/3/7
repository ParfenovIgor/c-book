<p>Далее пойдёт обрывочная информация, так как нет полной и чёткой документации о том, как работает компоновщик, и я обнаруживал сюрпризы.</p>

<p>Попробуем изменить использовать нестандартное название секции.</p>

<p><code>main.asm</code></p>

<pre><code class="language-no-highlight">section .code
global _start
_start:
    mov     rax, 0x3C
    mov     rdi, 0x0
    syscall</code></pre>

<pre><code class="language-no-highlight">$ nasm -felf64 main.asm -o main.o
$ ld main.o -o main
$ ./main
Segmentation fault (core dumped)
$ readelf -a main
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x401000
  Start of program headers:          64 (bytes into file)
  Start of section headers:          4328 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         1
  Size of section headers:           64 (bytes)
  Number of section headers:         5
  Section header string table index: 4

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .code             PROGBITS         0000000000401000  00001000
       000000000000000c  0000000000000000   A       0     0     1
  [ 2] .symtab           SYMTAB           0000000000000000  00001010
       0000000000000090  0000000000000018           3     2     8
  [ 3] .strtab           STRTAB           0000000000000000  000010a0
       0000000000000022  0000000000000000           0     0     1
  [ 4] .shstrtab         STRTAB           0000000000000000  000010c2
       0000000000000021  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  D (mbind), l (large), p (processor specific)

There are no section groups in this file.

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                 0x000000000000100c 0x000000000000100c  R      0x1000

 Section to Segment mapping:
  Segment Sections...
   00     .code 

There is no dynamic section in this file.

There are no relocations in this file.
No processor specific unwind information to decode

Symbol table '.symtab' contains 6 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS main.asm
     2: 0000000000401000     0 NOTYPE  GLOBAL DEFAULT    1 _start
     3: 000000000040200c     0 NOTYPE  GLOBAL DEFAULT    1 __bss_start
     4: 000000000040200c     0 NOTYPE  GLOBAL DEFAULT    1 _edata
     5: 0000000000402010     0 NOTYPE  GLOBAL DEFAULT    1 _end

No version information found in this file.</code></pre>

<p>Наша программа получила SIGSEGV. Чтобы разобраться в причине, посмотрим на структуру исполняемого файла.</p>

<p>Компоновщик положил нашу секцию в первый сегмент, сдвинув её на <code>0x1000</code>. Размер MemSiz этого сегмента <code>0x100c</code>, то есть, его явно хватает для хранения секции <code>.code</code>. Убедимся в этом, воспользовавшись дебаггером.</p>

<pre><code class="language-no-highlight">└───────────────────────────────────────────────────────────────────────────────────────────────────────┘
│  &gt; 0x401000        mov    $0x3c,%eax                                                                  │
│    0x401005        mov    $0x0,%edi                                                                   │
│    0x40100a        syscall                                                                            │
</code></pre>

<p>Ответ кроется в правах у сегмента: обратите внимание, что мы не можем его выполнять.</p>

<p>Поведение стандартного скрипта компоновки можно описать как "любые незнакомые секции класть в первый фиктивный сегмент".</p>

<p>(Здесь есть странное место, которое я не понял. Утверждается, что с помощью конструкции MEMORY в linker script-е можно изменить права сегмента. Однако в моём случае, хоть сегмент и получал нужный адрес, был по прежнему не executable.)</p>

<p>Эту проблему можно решить с помощью nasm-а. Дело в том, что в объектном файле секция <code>.code</code> тоже не является исполняемой.</p>

<pre><code class="language-no-highlight">$ readelf -a main.o
...
  [ 1] .code             PROGBITS         0000000000000000  00000180
       000000000000000c  0000000000000000   A       0     0     1
...</code></pre>

<p>Используем директиву <code>exec</code> в коде в объявлении секции.</p>

<pre><code class="language-no-highlight">section .code exec
global _start
_start:
    mov     rax, 0x3C
    mov     rdi, 0x0
    syscall</code></pre>

<p>Проверим права теперь.</p>

<pre><code>$ readelf -a main.o
...
  [ 1] .code             PROGBITS         0000000000000000  00000180
       000000000000000c  0000000000000000  AX       0     0     1
...
$ readelf -a main
...
Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                 0x00000000000000b0 0x00000000000000b0  R      0x1000
  LOAD           0x0000000000001000 0x0000000000401000 0x0000000000401000
                 0x000000000000000c 0x000000000000000c  R E    0x1000

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .code 
...</code></pre>

<p>Обратите внимание: компоновщик не сделал первый сегмент исполняемым, а поместил секцию <code>.code</code> в отдельный сегмент.</p>

<pre><code class="language-no-highlight">$ ./main</code></pre>

<p>Программа успешно выполняется.</p>