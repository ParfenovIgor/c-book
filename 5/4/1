<p>Здесь мы научимся писать программы, выполняющиеся непосредственно на процессоре, и тривиальные операционные системы. Главным источником информации будет данный сайт: <a href="https://wiki.osdev.org" rel="noopener noreferrer nofollow">https://wiki.osdev.org</a> . Изученной нами на протяжении данного курса информации должно быть достаточно, чтобы понимать tutorial-ы с уровнем "beginner". Мы будем использовать эмулятор <code>qemu</code> для запуска и отладки нашей ОС.</p>

<p>Представим, что мы хотим запустить написанную нами на языке ассемблера и C программу непосредственно на процессоре, без поддержки существующей операционной системы. Для начала нужно понять, а что делает компьютер в самом начале, ведь, очевидно, он не съинтерпретирует диск как файловую систему, не найдет там наш elf-файл (а почему именно elf, а не PE?), не поймет, что это elf-файл, не выполнит его загрузку в процесс, не прикомпонует его к shared objects. В общем, проблем намного больше, чем может показаться на первый взгляд.</p>

<p>Итак, компьютер (не процессор) делает следующее: берёт первый сектор (512 байт) данных с диска (при этом, последние два байта должны быть <code>0x55</code> и <code>0xAA</code>), загружает их в адрес <code>0x7C00</code> и прыгает в этот адрес. Это означает, что в первом секторе диска у нас должен быть некий код, который считает файловую систему, найдёт исполняемый файл ядра и загрузит его. Уложить это в 512 байт не получится, поэтому обычно эта логика пишется в нескольких первых секторах, а первый сектор загружает их втупую (не интерпретируя, как файловую систему) и прыгает в них.</p>

<p>Есть хорошая новость: драйвер для файловой системы мы писать здесь не будем. Мы воспользуемся загрузчиком <code>grub</code> (который вы скорее всего используете для запуска своей ОС). Есть и альтернативные загрузчики, например, <code>limine</code> и <code>lilo</code>.</p>

<p>Использование grub-а довольно простое.</p>

<ol>
	<li>Мы скомпилируем ядро в обычный 32-bit elf-файл.</li>
	<li>Мы создадим директорию и положим в неё файлы так, как мы хотим, чтобы они распологались на загрузочном диске.</li>
	<li>Мы создадим конфигурационный файл для grub-а в этой директории в <code>/boot/grub</code> и запишем в нём путь до нашего elf-файла.</li>
	<li>Мы воспользуемся утилитой <code>grub-mkrescue</code>, который создаст загрузочный диск по такому же принципу, по какому мы это делали с помощью монтирования и loop devices.</li>
</ol>