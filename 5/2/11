<p><strong>Проект: Компилятор</strong></p>

<p>Это масштабный, сложный и интересный проект.</p>

<p>Напишите компилятор для простейшего языка C подобного языка, который будет переписывать код на язык ассемблера. Ключевым здесь является наличие функций, локальных переменных и ветвлений.</p>

<p>Примерный план, как это можно сделать. Для простоты, язык будет иметь только statement-ы.</p>

<ul>
	<li>Считать текст и разбить его на statement-ы.</li>
	<li>Создать структуры для statement-ов.</li>
	<li>Один из statement-ов — блок, содержащий список statement-ов.</li>
	<li>Остальные statement-ы:
	<ul>
		<li>if — <code>if (a == 0) BLOCK</code> (по хорошему, аргумент должен быть expression, но можно проверять и только на ноль)</li>
		<li>definition — <code>def a, b</code></li>
		<li>assignment — <code>a = 5</code></li>
		<li>addition — <code>a = b + 4</code> (по хорошему, это должен быть expression)</li>
		<li>function definition — <code>func foo(a, b) BLOCK</code></li>
		<li>function call — <code>foo(a, b)</code></li>
	</ul>
	</li>
	<li>Statement-ы должны быть организованы в дерево, и компиляция выполняется обходом по этому дереву.</li>
	<li>Компиляция каждого из statement-ов, после изучения вывода компилятора gcc, должна быть очевидной.</li>
</ul>