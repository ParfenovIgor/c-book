<p>Control flow выполняется с помощью условных прыжков, которые совершают переход к адресу при условии, что какой-то флаг включен. Например, инструкция <code>jz</code> выполняет прыжок, если включен ZF.</p>

<p>Мы можем написать <code>if (rax == rbx)</code> такой последовательностью инструкций:</p>

<pre><code class="language-no-highlight">    sub     rax, rbx
    jz      if_true</code></pre>

<p>Если при выполнении инструкции вычитания получается ноль, то включается ZF. Если он включен, выполняется переход не к инструкции, следующей за инструкцией <code>jz</code>, а к метке <code>if_true</code>.</p>

<p>Рассмотрим более полный пример. Так мы пишем if statement на языке ассемблера.</p>

<pre><code class="language-no-highlight">section .text
global _start
_start:
    mov     rax, 1
    mov     rbx, 2

    sub     rax, rbx
    jz      if_true
if_else:
    mov     rcx, 0
    jmp     if_end
if_true:
    mov     rcx, 1
if_end:

    ret</code></pre>

<p>Проследите за логикой прыжков когда регистры rax и rbx равны, и когда не равны.</p>

<p>Не много ли меток (метка <code>if_else</code> присутствует для наглядности и не используется)? Давайте посмотрим, как скомпилирует if statement компилятор gcc.</p>

<pre><code class="language-cpp">int main() {
    int a = 1, b = 2, c;
    if (a == b) {
        c = 1;
    }
    else {
        c = 0;
    }
    return 0;
}</code></pre>

<pre><code class="language-no-highlight">$ gcc main.c -S -masm=intel -o main.s</code></pre>

<pre><code class="language-no-highlight">...
	cmp	eax, DWORD PTR -8[rbp]
	jne	.L2
	mov	DWORD PTR -4[rbp], 1
	jmp	.L3
.L2:
	mov	DWORD PTR -4[rbp], 0
.L3:
...</code></pre>

<p>Здесь есть следующие отличия:</p>

<ul>
	<li>Вместо регистров используется стек. Конечно, я не могу заставить компилятор использовать регистры, ведь это смысл компилятора — использовать регистры эффективно. Поэтому он обращается к стеку, адрес которого содержится в регистре <code>rbp</code>. Чуть позже мы это изучим.</li>
	<li>Вместо инструкции <code>sub</code> используется инструкция <code>cmp</code>. Она выставляет флаги так же, как и инструкция <code>sub</code>, но сам destination регист не меняет.</li>
	<li>Вместо инструкции <code>jz</code> используется инструкция <code>jne</code> — jump not equal, которая выполняет прыжок, если ZF выключен.</li>
</ul>

<p>В остальном, сама структура меток и прыжков полностью идентична нашей.</p>

<p>Изучите самостоятельно все conditional jump инструкции, например, <code>jl</code> (jump less), <code>jg</code> (jump greater) и т.д.</p>

<p>Помимо обычных меток есть и локальные метки, названия которых начинаются с символа <code>.</code>.</p>

<pre><code class="language-no-highlight">section .text
global _start

_start:
    jmp     .aba
.1:
    jmp     foo
.aba:
    jmp     .1

foo:
    jmp     .1
.1:
    jmp     $</code></pre>

<p>В данном примере nasm транслирует название локальной метки <code>.1</code> под меткой <code>_start</code> в <code>_start.1</code>, название локальной метки <code>.aba</code> под меткой <code>_start</code> в <code>_start.aba</code>, а название локальной метки <code>.1</code> под меткой <code>.foo</code> в <code>foo.1</code>. Попробуйте самостоятельно проследить за порядком выполнения инструкций в этой программе.</p>

<p>Оператор <code>$</code> транслируется в адрес начала текущей инструкции, поэтому в результате выполнения инструкции <code>jmp $</code> мы перейдем в неё же, создав бесконечный цикл.</p>

<p>Существует также оператор <code>$$</code>, который транслируется в адрес начала текущей секции. Однако область его применения достаточно специфична, поэтому мы на него здесь не посмотрим.</p>