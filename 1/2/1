<p>На протяжении первого модуля допустимо использовать любые компиляторы и любые IDE, а также online компиляторы, например, <a href="https://godbolt.org/" rel="noopener noreferrer nofollow">godbolt</a> (обратите внимание на количество доступных компиляторов там).</p>

<p>Для удобства мы будем работать с операционной системой <code>Linux</code>, так как она имеет более простой и сильный <code>shell</code>, более простое и понятное внутреннее устройство, которое мы также будем изучать, и более удобные необходимые нам инструменты.</p>

<p>Важно определить и понять, какие компиляторы мы будем использовать. Хоть и с верхней стороны язык C в них идентичен, с нижней стороны они могут сильно отличаться. Я выбрал компилятор <code>gcc</code>. Это стандартный компилятор в системах <code>Linux</code>, и в большинстве дистрибутивов он установлен изначально.</p>

<p>На <code>Windows</code> имеется компилятор <code>mingw</code>, который заявлен, как порт gcc на Windows. Его можно установить, например, вместе с <code>IDE</code> <code>Codeblocks</code>, а затем добавить исполняемый файл в переменную PATH.</p>

<p>Идея курса в "сквозном" изучении компилятора gcc, поэтому разрешается пользоваться IDE только в течении первого модуля. Далее мы будем запускать gcc только с помощью терминала. До начала второго модуля убедитесь, что gcc доступен в терминале.</p>

<p>Существуют альтернативные компиляторы, которые имеет смысл изучить, но которые не будут покрыты данным курсом.</p>

<ul>
	<li><code>MSVC</code>. О данном компиляторе мне известно мало. Он предназначен только для Windows, и с его установкой могут быть проблемы.</li>
	<li><code>Clang</code>. Данный компилятор имеет другой "путь" компиляции, в процессе которого используется язык <code>llvm</code>. Предназначен для обеих ОС.</li>
	<li><code>Zig</code>. Помимо того, что zig является отдельным языком, его компилятор является хорошей альтернативой другим компиляторам языка C.</li>
</ul>