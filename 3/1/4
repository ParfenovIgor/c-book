<p><code>main.c</code></p>

<pre><code class="language-cpp">#include "foo.h"

int main() {
    printf("%d\n", foo(2));
    return 0;
}</code></pre>

<p> <code>foo.h</code></p>

<pre><code class="language-cpp">int foo(int x) {
    return x + 1;
}</code></pre>

<p>Ассемблирование переписывает код, написанный на языке ассемблера, в объектный файл (имеет расширение <code>.o</code> или <code>.obj</code>). Объектный файл состоит из сегментов, которые содержат инструкции, из которых состоит наша программа, а также некоторую метаинформацию.</p>

<p>Выполните <code>gcc main.c -c</code>, чтобы выполнить ассемблирование. Выходной файл не состоит из читаемого текста. Выполним сначала <code>hd main.o</code>, чтобы посмотреть содержимое, как есть (содержимое обрезано):</p>

<pre><code class="language-no-highlight">00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  01 00 3e 00 01 00 00 00  00 00 00 00 00 00 00 00  |..&gt;.............|
00000020  00 00 00 00 00 00 00 00  e0 02 00 00 00 00 00 00  |................|
00000030  00 00 00 00 40 00 00 00  00 00 40 00 0e 00 0d 00  |....@.....@.....|
00000040  f3 0f 1e fa 55 48 89 e5  89 7d fc 8b 45 fc 83 c0  |....UH...}..E...|
00000050  01 5d c3 f3 0f 1e fa 55  48 89 e5 bf 02 00 00 00  |.].....UH.......|
00000060  e8 00 00 00 00 89 c6 48  8d 05 00 00 00 00 48 89  |.......H......H.|
00000070  c7 b8 00 00 00 00 e8 00  00 00 00 b8 00 00 00 00  |................|
00000080  5d c3 25 64 0a 00 00 47  43 43 3a 20 28 55 62 75  |].%d...GCC: (Ubu|
00000090  6e 74 75 20 31 31 2e 34  2e 30 2d 31 75 62 75 6e  |ntu 11.4.0-1ubun|
000000a0  74 75 31 7e 32 32 2e 30  34 29 20 31 31 2e 34 2e  |tu1~22.04) 11.4.|
000000b0  30 00 00 00 00 00 00 00  04 00 00 00 10 00 00 00  |0...............|
000000c0  05 00 00 00 47 4e 55 00  02 00 00 c0 04 00 00 00  |....GNU.........|
...</code></pre>

<p>Это мало что нам говорит. Для анализа объектных файлов есть специальные программы.</p>

<p><code>readelf</code> покажет нам структуру файла и содержимое некоторых секций (sections). Выполните <code>readelf main.o -a</code>.</p>

<pre><code class="language-no-highlight">ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
...
Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         0000000000000000  00000040
       0000000000000042  0000000000000000  AX       0     0     1
  [ 2] .rela.text        RELA             0000000000000000  000001f0
       0000000000000048  0000000000000018   I      11     1     8
  [ 3] .data             PROGBITS         0000000000000000  00000082
       0000000000000000  0000000000000000  WA       0     0     1
...
Relocation section '.rela.text' at offset 0x1f0 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000000021  000400000004 R_X86_64_PLT32    0000000000000000 foo - 4
00000000002a  000300000002 R_X86_64_PC32     0000000000000000 .rodata - 4
000000000037  000600000004 R_X86_64_PLT32    0000000000000000 printf - 4
...
Symbol table '.symtab' contains 7 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS main.c
     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 .text
     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 .rodata
     4: 0000000000000000    19 FUNC    GLOBAL DEFAULT    1 foo
     5: 0000000000000013    47 FUNC    GLOBAL DEFAULT    1 main
     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf
...</code></pre>

<p>Мы изучим это содержимое позже.</p>

<p><code>objdump</code> покажет нам машинный код на языке ассемблера. Выполните <code>objdump main.o -d</code>.</p>

<pre><code class="language-no-highlight">
main.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &lt; foo&gt;:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	8b 45 fc             	mov    -0x4(%rbp),%eax
   e:	83 c0 01             	add    $0x1,%eax
  11:	5d                   	pop    %rbp
  12:	c3                   	ret    

0000000000000013 &lt; main&gt;:
  13:	f3 0f 1e fa          	endbr64 
  17:	55                   	push   %rbp
  18:	48 89 e5             	mov    %rsp,%rbp
  1b:	bf 02 00 00 00       	mov    $0x2,%edi
  20:	e8 00 00 00 00       	call   25 &lt;main+0x12&gt;
  25:	89 c6                	mov    %eax,%esi
  27:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2e &lt;main+0x1b&gt;
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	b8 00 00 00 00       	mov    $0x0,%eax
  36:	e8 00 00 00 00       	call   3b &lt;main+0x28&gt;
  3b:	b8 00 00 00 00       	mov    $0x0,%eax
  40:	5d                   	pop    %rbp
  41:	c3                   	ret</code></pre>

<p>Здесь объявлены две функции. В <code>&lt;&gt;</code> скобках показаны названия функций. Сравните их содержимое с результатом выполнения команды <code>gcc main.c -S</code>.</p>