<p> <code>main.c</code></p>

<pre><code class="language-cpp">#include "foo.h"

int main() {
    printf("%d\n", foo(2));
    return 0;
}</code></pre>

<p> <code>foo.h</code></p>

<pre><code class="language-cpp">int foo(int x) {
    return x + 1;
}</code></pre>

<p>Препроцессирование выполняет все строки, которые начинаются с символа <code>#</code>(и следующие за ними, если они заканчиваются символом <code>\</code>). Это могут быть инструкции <code>#include</code>, <code>#define</code>, <code>#ifdef</code> и некоторые другие.</p>

<p>Инструкция <code>#include</code> вставляет содержимое файла. Если название файла заключено в <code>""</code>, то путь файла указывается относительно текущего файла (в примере файл <code>foo.h</code> должен находиться в одной директории с файлом <code>main.c</code>). Если название файла заключено в <code>&lt;&gt;</code>, то компилятор попытается найти файл относительно стандартной глобальной директории заголовочных файлов (там, где лежат файлы <code>stdio.h</code>, <code>stdlib.h</code> и т.д.) и относительно переданных ему директорий заголовочных файлов с помощью флага <code>-I</code> (например, <code>gcc -I. main.c</code>, что означает, искать заголовочные файлы в директории <code>.</code> (то есть, в текущей)).</p>

<p>Выполните <code>gcc main.c -E</code>, чтобы выполнить препроцессирование. Вы получите такой вывод:</p>

<pre><code class="language-cpp"># 0 "main.c"
# 0 "&lt;built-in&gt;"
# 0 "&lt;command-line&gt;"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "&lt;command-line&gt;" 2
# 1 "main.c"
# 1 "foo.h" 1
int foo(int x) {
    return x + 1;
}
# 2 "main.c" 2

int main() {
    printf("%d\n", foo(2));
    return 0;
}
</code></pre>

<p>Результатом препроцессирования всегда является один файл. Обратите внимание, что содержимое файла <code>foo.h</code> непосредственно вставилось в выходной файл без каких-либо изменений.</p>

<p>Рассмотрим такую программу.</p>

<p><code>main.c</code></p>

<pre><code class="language-cpp">#ifdef FOO
#define DOO 4
#elif BOO
#define DOO 5
#else
#define DOO 6
#endif

#define FOO 3

#ifdef FOO
#define BOO 4
#endif

int main() {
    printf("%d %d %d\n", FOO, BOO, DOO);
    return 0;
}</code></pre>

<p>В результате её препроцессирования "переменные" <code>FOO</code>, <code>BOO</code>, <code>DOO</code> заменятся на, соответственно, значения <code>3</code>, <code>4</code>, <code>6</code>. В целом, логика работы таких ветвлений очевидна. Обратим лишь внимание на то, что обрабатываются они просто сверху вниз, и поэтому в блоке, который определяет переменную <code>DOO</code>, переменные <code>FOO</code> и <code>BOO</code> ещё не определены, и переменная <code>DOO</code> получает значение <code>6</code>.</p>

<p>Если вы не определите значение какой либо переменной, то её замены в коде не произойдет. При этом, полученный код может оказаться корректным.</p>

<p>Инструкции <code>#define</code> могут принимать аргументы. Такие инструкции называются макросами, и мы их уже видели.</p>